package ru.spasitel.factorioautoplanner.formatter

import com.google.gson.Gson
import ru.spasitel.factorioautoplanner.data.Field
import ru.spasitel.factorioautoplanner.data.Sell
import ru.spasitel.factorioautoplanner.data.State
import ru.spasitel.factorioautoplanner.data.Utils
import ru.spasitel.factorioautoplanner.data.auto.Blueprint
import ru.spasitel.factorioautoplanner.data.auto.BlueprintDTO
import ru.spasitel.factorioautoplanner.data.auto.Entity
import ru.spasitel.factorioautoplanner.data.auto.Position
import ru.spasitel.factorioautoplanner.data.building.BuildingType
import ru.spasitel.factorioautoplanner.data.building.Chest
import kotlin.math.abs
import kotlin.math.roundToInt

private const val ROBOPORT_DISTANCE = 25

class BluePrintFieldExtractor {

    fun transformBlueprintToField(blueprintDTO: BlueprintDTO): Field {

        val blueprint = normalizeBlueprint(blueprintDTO)

        val (roboportsField, chestField) = getRoboportsAndChests(blueprint)

        val chests = calculateChests(blueprint)
        val liquids = calculateLiquids(blueprint)

        val state = transformBuildingsToEmpty(blueprint)
        return Field(state, chests, liquids, roboportsField, chestField)
    }

    private fun calculateLiquids(blueprint: BlueprintDTO): Map<String, Set<Sell>> {
        val liquids = HashMap<String, MutableSet<Sell>>()
        blueprint.blueprint.entities.filter { it.name == "train-stop" }.forEach {
            val name = it.station!!
            //todo directions
            if (name.contains("water")) {
                val sell1 = Sell((it.position.x + 1).roundToInt(), (it.position.y).roundToInt())
                val sell2 = Sell((it.position.x + 3).roundToInt(), (it.position.y + 2).roundToInt())
                liquids.getOrPut(name) { HashSet() }.addAll(listOf(sell1, sell2))
            } else if (name.contains("oil")) {
                val sell1 = Sell((it.position.x - 22).roundToInt(), (it.position.y + 3).roundToInt())
                val sell2 = Sell((it.position.x - 24).roundToInt(), (it.position.y + 1).roundToInt())
                liquids.getOrPut(name) { HashSet() }.addAll(listOf(sell1, sell2))
            }
        }
        return liquids
    }

    private fun calculateChests(blueprint: BlueprintDTO): Map<String, Set<Chest>> {
        val chests = HashMap<String, MutableSet<Chest>>()
        val stops = HashMap<Sell, String>()
        blueprint.blueprint.entities.filter { it.name == "train-stop" }.forEach {
            val name = it.station!!
            if (name.contains("water") || name.contains("oil")) {
                return@forEach
            }
            stops[Sell(it.position.x.roundToInt(), it.position.y.roundToInt())] = name
        }
        blueprint.blueprint.entities.filter { it.name == "logistic-chest-passive-provider" }
            .forEach {
                val sell = Sell((it.position.x - 0.5).roundToInt(), (it.position.y - 0.5).roundToInt())
                val chest = Utils.getBuilding(sell, BuildingType.PROVIDER_CHEST) as Chest
                val name = stops.keys.minByOrNull { s -> abs(s.x - sell.x) + abs(s.y - sell.y) }.let { s ->
                    stops[s]
                }
                if (name != null) {
                    chests.getOrPut(name) { HashSet() }.add(chest)
                } else {
                    println("Can't find stop for chest $sell")
                }
            }
        return chests
    }

    private fun normalizeBlueprint(blueprintDTO: BlueprintDTO): BlueprintDTO {
        val startX = blueprintDTO.blueprint.entities.minOf { it.position.x }.roundToInt() - 2
        val startY = blueprintDTO.blueprint.entities.minOf { it.position.y }.roundToInt() - 2

        val entities = blueprintDTO.blueprint.entities.map {
            Entity(
                it.connections,
                it.control_behavior,
                it.direction,
                it.entity_number,
                it.name,
                it.neighbours,
                Position(it.position.x - startX, it.position.y - startY),
                it.station
            )
        }
        return BlueprintDTO(
            Blueprint(
                entities,
                blueprintDTO.blueprint.icons,
                blueprintDTO.blueprint.item,
                blueprintDTO.blueprint.version
            )
        )
    }

    private fun toPair(Entity: Entity): Pair<Double, Double> {
        return Pair(Entity.position.x, Entity.position.y)
    }

    private fun getRoboportsAndChests(blueprintDTO: BlueprintDTO): Pair<Pair<Sell, Sell>, Pair<Sell, Sell>> {
        val x =
            (blueprintDTO.blueprint.entities.maxOf { it.position.x } + blueprintDTO.blueprint.entities.minOf { it.position.x }) / 2
        val y =
            (blueprintDTO.blueprint.entities.maxOf { it.position.y } + blueprintDTO.blueprint.entities.minOf { it.position.y }) / 2
        val roboports = blueprintDTO.blueprint.entities.filter { it.name == "roboport" }
        val roboport = roboports
            .minWithOrNull(compareBy { abs(it.position.x - x) + abs(it.position.y - y) })!!
        val roboportSet = HashSet<Pair<Double, Double>>()
        roboportSet.add(toPair(roboport))
        var changed = true
        while (changed) {
            changed = false
            roboports.map { toPair(it) }.minus(roboportSet).filter { new ->
                roboportSet.find { abs(it.first - new.first) < ROBOPORT_DISTANCE * 2 && abs(it.second - new.second) < ROBOPORT_DISTANCE * 2 } != null
            }.forEach {
                roboportSet.add(it)
                changed = true
            }
        }

        val roboportsField = Pair(
            Sell(
                (roboportSet.minOf { it.first } - 2).roundToInt(),
                (roboportSet.minOf { it.second } - 2).roundToInt()
            ),
            Sell(
                (roboportSet.maxOf { it.first } - 2).roundToInt(),
                (roboportSet.maxOf { it.second } - 2).roundToInt()
            )
        )

        val chestField = Pair(
            Sell(
                (roboportsField.first.x - ROBOPORT_DISTANCE + 2),
                (roboportsField.first.y - ROBOPORT_DISTANCE + 2)
            ),
            Sell(
                (roboportsField.second.x + ROBOPORT_DISTANCE + 1),
                (roboportsField.second.y + ROBOPORT_DISTANCE + 1)
            )
        )

        return Pair(roboportsField, chestField)
    }

    private fun transformBuildingsToEmpty(blueprintDTO: BlueprintDTO): State {
        val size = Sell(
            blueprintDTO.blueprint.entities.maxOf { it.position.x }.roundToInt() + 2,
            blueprintDTO.blueprint.entities.maxOf { it.position.y }.roundToInt() + 2
        )
        var state = State(emptySet(), emptyMap(), size)
        val curved = curvedRails()
        for (entity in blueprintDTO.blueprint.entities) {
            val x = entity.position.x
            val y = entity.position.y
            when (entity.name) {
                "pipe", "fast-inserter",
                "rail-signal",
                "long-handed-inserter",
                "logistic-chest-requester",
                "inserter",
                "rail-chain-signal",
                "steel-chest",
                "logistic-chest-passive-provider",
                "pipe-to-ground",
                "express-underground-belt",
                "stack-inserter",
                "medium-electric-pole" -> {
                    val start = Sell((x - 0.5).roundToInt(), (y - 0.5).roundToInt())
                    val addBuilding = state.addBuilding(Utils.getBuilding(start, BuildingType.EMPTY))
                    if (addBuilding == null) {
                        println("Can't add building $entity")
                    } else {
                        state = addBuilding
                    }

                }

                "big-electric-pole",
                "train-stop",
                "substation" -> {
                    val start = Sell((x - 1).roundToInt(), (y - 1).roundToInt())
                    state = state.addBuilding(Utils.getBuilding(start, BuildingType.EMPTY2))!!

                }

                "radar",
                "storage-tank" -> {
                    val start = Sell((x - 1.5).roundToInt(), (y - 1.5).roundToInt())
                    val addBuilding = state.addBuilding(Utils.getBuilding(start, BuildingType.EMPTY3))
                    if (addBuilding == null) {
                        println("Can't add building $entity")
                    } else {
                        state = addBuilding
                    }
                }

                "roboport" -> {
                    val start = Sell((x - 2).roundToInt(), (y - 2).roundToInt())
                    state = state.addBuilding(Utils.getBuilding(start, BuildingType.EMPTY4))!!
                }

                "pump",
                "arithmetic-combinator",
                "decider-combinator" -> {
                    if (entity.direction == 0 || entity.direction == 4) {
                        val start = Sell((x - 0.5).roundToInt(), (y - 1).roundToInt())
                        state.addBuilding(Utils.getBuilding(start, BuildingType.EMPTY))?.let { state = it }
                        state.addBuilding(Utils.getBuilding(start.down(), BuildingType.EMPTY))?.let { state = it }
                    } else {
                        val start = Sell((x - 1).roundToInt(), (y - 0.5).roundToInt())
                        state.addBuilding(Utils.getBuilding(start, BuildingType.EMPTY))?.let { state = it }
                        state.addBuilding(Utils.getBuilding(start.right(), BuildingType.EMPTY))?.let { state = it }
                    }
                }

                "straight-rail" -> {
                    if (entity.direction.mod(2) == 0) {
                        val start = Sell((x - 1).roundToInt(), (y - 1).roundToInt())
                        state.addBuilding(Utils.getBuilding(start, BuildingType.EMPTY))?.let { state = it }
                        state.addBuilding(Utils.getBuilding(start.down(), BuildingType.EMPTY))?.let { state = it }
                        state.addBuilding(Utils.getBuilding(start.right(), BuildingType.EMPTY))?.let { state = it }
                        state.addBuilding(Utils.getBuilding(start.down().right(), BuildingType.EMPTY))
                            ?.let { state = it }

                    } else {
                        var start = Sell((x).roundToInt(), (y).roundToInt())
                        when (entity.direction) {
                            1 -> {
                                start = start.up()
                            }

                            5 -> {
                                start = start.left()
                            }

                            7 -> {
                                start = start.up().left()
                            }
                        }

                        val addBuilding = state.addBuilding(Utils.getBuilding(start, BuildingType.EMPTY))
                        if (addBuilding == null) {
                            println("Can't add building $entity")
                        } else {
                            state = addBuilding
                        }
                        state.addBuilding(Utils.getBuilding(start.left(), BuildingType.EMPTY))?.let { state = it }
                        state.addBuilding(Utils.getBuilding(start.right(), BuildingType.EMPTY))?.let { state = it }
                        state.addBuilding(Utils.getBuilding(start.down(), BuildingType.EMPTY))?.let { state = it }
                        state.addBuilding(Utils.getBuilding(start.up(), BuildingType.EMPTY))?.let { state = it }
                    }
                }

                "curved-rail" -> {
                    val set = curved[entity.direction]!!
                    for (sell in set) {
                        state.addBuilding(
                            Utils.getBuilding(
                                Sell((x + sell.x).roundToInt(), (y + sell.y).roundToInt()),
                                BuildingType.EMPTY
                            )
                        )?.let { state = it }
                    }
                }

                else -> throw RuntimeException("Unknown entity ${entity.name}")

            }
        }
        return state
    }

    private fun curvedRails(): Map<Int, Set<Sell>> {
        val blueprint = Gson().fromJson(Formatter.decode(curvedRails), BlueprintDTO::class.java)
        val rails = blueprint.blueprint.entities.filter { it.name == "curved-rail" }.sortedBy { it.position.x }
        val chests =
            blueprint.blueprint.entities.filter { it.name == "logistic-chest-storage" }.sortedBy { it.position.x }
                .toMutableList()
        val result = HashMap<Int, Set<Sell>>()

        //10,16
        var odd = false

        rails.forEach { rail ->
            val xr = rail.position.x.roundToInt()
            val yr = rail.position.y.roundToInt()
            val count = if (odd) 16 else 10
            odd = !odd
            val railChests = chests.subList(0, count)
            val set = HashSet<Sell>()
            val setY = HashSet<Double>()
            railChests.forEach {
                setY.add(it.position.y)
            }
            setY.forEach {
                val c = railChests.filter { x -> x.position.y == it }
                assert(c.size == 2)
                for (x in (c[0].position.x - 0.5).roundToInt() + 1 until (c[1].position.x - 0.5).roundToInt()) {
                    set.add(Sell(x - xr, (it - 0.5).roundToInt() - yr))
                }
            }
            chests.removeAll(railChests)

            result[rail.direction] = set
        }


        return result
    }

    fun diagonalRails() {
        val blueprint = Gson().fromJson(Formatter.decode(diagonalRails), BlueprintDTO::class.java)
        val straight = Gson().fromJson(Formatter.decode(straightRails), BlueprintDTO::class.java)
        println()
    }

    companion object {

        const val straightRails =
            "0eNqlluFugyAUhd/l/sZGQAF9lWZZrCWWxGIjdFnT+O7Dmm3NAqGDfyLh89zjPcAdDuNVXmalLbR3UP2kDbT7Oxg16G5c39nbRUILysozINDdeR3NnRphQaD0UX5CixcUXTJOgzJW9UV/ksYWxk5zN8gnCFneEEhtlVVyE/EY3N719XyQs/tKjIXgMhm3fNKrCocsGK92NYKbe2wo2dXLKvQPlvxgjXV1DSdbPMrz0eg3y1UMRzXLfpvnHi5NkUuicqsErHhyofRj60ws9mPZ6+aKkLnEw+UpcsuoCyITG3ChScHiKBaXmdyACxj/IxLN71/zoUhKCni8dJrJDZWeEi9ex/XWmZtXSC/L3GVC3JSA8RdaNiVhTMT1pkSMxfuMlK9HgfHABkZ94JTTjMUbgqQEjsUbmNA8g0kT4FZ5ejeuuzk8bhvt030GwYeczXaCCFzxhnAuqKCULcsXF+7onw=="

        const val diagonalRails =
            "0eNqllNGKhCAUht/lXNswamX1KsOyNI00QlmoDRvhu68VuxNL4WJ3af2fn4fTmeDeDLxXQhooJhBVJzUUtwm0qGXZzHtm7DkUIAxvAYEs23nVdLXQRlRR9eTaRNp0qqw5WARCPvgXFNgiL0SVotlEyG7kJZQZ3M5vav0iwpsktR8IuDTCCL7qL4vxUw7tnStn4xNH0HfaxTs5H+2QUcriS4JgdI85JZfEznZ/sOQtZdxl6qeJljvt0egPy1UGHkLxan3Pdrg0RJd4deMQbPLG4n1scrK4131serIIB1gWgsXeImQB2DTz2uYhWOa1xdf/d27KDjqX7oFD/rTU3wyYhHD9vYvpuQKT/IAbn/NduW6qLROz2ExpBC+u9BIjGY5ZThjLaEZpau03jMzjSQ=="

        const val curvedRails =
            "0eNqlmt1O4zAQhd/F1ymKf8fuqyC0Km3ERiopSgJahPru21JBuyij8Z65a0H9cnpsxx8mH+Zx/9q9jP0wm/WH6beHYTLr+w8z9U/DZn/+2fz+0pm16efu2TRm2Dyf342bfm+OjemHXffHrO2xET+yPzz109xvV9vf3TSvpvkwbp66G4g7PjSmG+Z+7rtLiM8377+G1+fHbjxd5Zu1fR3fut3qM0VjXg7T6TOH4XzpE2dFLjfm/fSihPaE3/Vjt738/jPnD6qTEi5e4C5+XcLdxeMC1iNYumL9MjYg2ChiI4INYgkJwNpWTEsI1oppc+38am/m1wKnAPHaLH5r2yJcEr+2tf/PTUUeJeuUXC6vrxynlLn7QFjCAksrZXnF2qjkcjWk2hoSV0NcwgKL63QFOW5Wcrl6C8KNYl7XKrlMXgesNjqH/B5DhuuUXMtwa1cbeW6a+SUsspF5kuMiO5mPcr3IVuaKzCUll+shK0WB4xYll+nBI5ubszK3Whrt1/T1+d/pS0tYZLVZeTp4rzQmZth8UHK5vMhya5OcNym5XF6q3TQLdzdLS1hktbUV9SKbW8livQHZ3IoX8war5HJ5tSrJcb2Sy/WgdUkuL+SS8rII1S5J3F3SLWERl6SKuIhLUpC5RemozLBFyCXl3SJapaNyeZ2Sy+VFdjd/7eH8cpELyeR13M4vF7mQTAY5L7K7eS/nRWTStzI3K7lcD5BMJpGbWt3hG9dDQv52c07O63Tyy+aFbDLJXMgmSe4Bskn5/pCS7kSO7QFZb22U82Yll8sLnUw6kUvQyaQVeyBIJ+X7A0E6Kd8fCNHJLM9fCkoulxfSSXn+UlJyubyQT2Y5L+STFf0Wnady3Iz4JHmxh4ysN5L9ITsll8uLrLck7285KLlcXsgnb7jEcJPSUzmu1icTw9X6JJe3KL2PyVu0PsnkLZBPyj0U6HQyyz1APunlvEHJ5fJGpfdxXK1Pcj1ofZLjan2S66EovY+4/3RD55OlAozscDlXgJ3uxI+r2LZe6VIsGJLKUFEFZJWuApyUYLYKyCtrBg8Sy1hRRVEaFZfYQmpZsaShp0xSrkgMHVb+3JwfmsvjauubB+Ia89aN0+V0O9tAxRFln71Px+NfWo2uSw=="
        const val field =
            ""
        const val field2 =
            ""

        @JvmStatic
        fun main(args: Array<String>) {
            BluePrintFieldExtractor().diagonalRails()
            val decodeField = Formatter.decode(field2)
            val dto = Gson().fromJson(decodeField, BlueprintDTO::class.java)
            val toField = BluePrintFieldExtractor().transformBlueprintToField(dto)
            val fixed = toField.state

            var test = State(emptySet(), emptyMap(), fixed.size)
            for (x in 3 until fixed.size.x - 3) {
                for (y in 3 until fixed.size.y - 3) {
                    val sell = Sell(x, y)
                    if (fixed.map[sell] == null) {
                        val type = if (Utils.isBetween(x, y, toField.chestField) &&
                            !Utils.isBetween(x, y, toField.roboportsField)
                        )
                            BuildingType.REQUEST_CHEST else
                            BuildingType.PROVIDER_CHEST
                        test = test.addBuilding(Utils.getBuilding(sell, type))!!
                    } else if (toField.liquids.values.any { it.contains(sell) }) {
                        test = test.addBuilding(Utils.getBuilding(sell, BuildingType.REQUEST_CHEST))!!
                    }
                }
            }
            Utils.printBest(test)
        }
    }
}